@inject IProductService productService
@implements IDisposable

<div>
	<h2 class="text-center">
		Top Products of this Month
	</h2>
</div>

@if(productService.Products == null
		|| !productService.Products.Any())
{
	<span>@productService.Message</span>
} else
{
	<div class="container">
		@foreach(var product in productService.Products)
		{
			@if(product.Featured)
			{
				<div class="featured-product d-flex flex-column">
					<div class="image-wrapper">
						<a href="product/@product.Id">
							@if(!string.IsNullOrEmpty(product.ImageUrl))
							{
								<img class="media-img" src="@product.ImageUrl" alt="@product.Title" />
							} else if(product.Images.Count > 0)
							{
								<img class="media-img" src="@product.Images[0].Data" />
							}
						</a>
					</div>
					<div>
						<h5>
							@*text-primary text-decoration-underline*@
							<a class="product-title" href="product/@product.Id">
								@product.Title
							</a>
						</h5>
						@if(product.Variants.Any())
						{
							var price = product.Variants.ToList();
							<h5 class="price mt-auto">
								$@price[0].Price
							</h5>
						}
						@if(GetProductRatingCount(product.Id) > 0)
						{
							<div class="reviews d-flex text-secondary gap-1 align-items-center">
								<div class="">
									<i class="oi oi-star icon-rate text-warning"></i>
								</div>
								<div class="d-flex gap-1 align-items-center text">
									<span>@rate.ToString("#.0").Replace(',', '.')</span>
									<span>|</span>
									@*<span>@ratingCount user</span>*@
									<span>@RateToString(ratingCount) user</span>
								</div>
							</div>
						}
					</div>
				</div>
			}
		}
	</div>
}

@code {

	int ratingCount;
	decimal rate;

	protected override void OnInitialized()
	{
		productService.ProductsChanged += StateHasChanged;
	}

	public void Dispose()
	{
		productService.ProductsChanged -= StateHasChanged;
	}

	private int GetProductRatingCount(int productId)
	{
		var product = productService.Products.First(p => p.Id == productId);

		if(product.Ratings.Any())
		{
			ratingCount = product.Ratings.Count();

			rate = (decimal)product.Ratings.Average(pr => pr.Rate);

			return product.Ratings.Count();
		} else
		{
			return 0;
		}
	}

	private string RateToString(int count)
	{
		if(count < 100)
			return count.ToString();
		else if(count <= 250)
			return "100+";
		else if(count < 500)
			return "250+";
		else if(count < 1000)
			return "500+";
		else
			return "1000+";
	}
}
