@inject IUnitOfService unitOfService
@implements IDisposable

<div>
	<h2 class="text-center">
		Top Products of this Month
	</h2>
</div>

@if(!unitOfService.Product.Products.Any())
{
	<span>@unitOfService.Product.Message</span>
} else
{
	<div class="container">
		@foreach(var product in unitOfService.Product.Products)
		{
			@if(product.Featured)
			{
				<div class="featured-product d-flex flex-column">
					<div>
						<a href="product/@product.Id">
							<img src="@product.ImageUrl"/>
						</a>
					</div>
					<h4>
						<a class="text-primary text-decoration-underline" href="product/@product.Id">
							@product.Title
						</a>
					</h4>
					@if(product.Variants.Any())
					{
						var price = product.Variants.ToList();
						<h5 class="price mt-auto">
							$@price[0].Price
						</h5>
					}
				</div>
			}
		}
	</div>
}

@code {
	protected override void OnInitialized()
	{
		unitOfService.Product.ProductsChanged += StateHasChanged;
	}

	public void Dispose()
	{
		unitOfService.Product.ProductsChanged -= StateHasChanged;
	}
}
