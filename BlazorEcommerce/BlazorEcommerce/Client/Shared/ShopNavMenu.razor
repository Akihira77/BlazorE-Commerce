@inject ICategoryService categoryService
@inject ILocalStorageService localStorage
@inject ICartService cartService
@implements IDisposable

<div class="top-row ps-3 navbar navbar-dark navbar-toggler-wrapper">
    <div class="container-fluid">
        <HomeButton />
        <div class="d-flex justify-content-end">
            <UserButton />
            <button title="Navigation menu" class="navbar-toggler ms-auto" @onclick="ToggleNavMenu">
                <span class="navbar-toggler-icon"></span>
            </button>
        </div>
    </div>
</div>
@*@onclick="ToggleNavMenu"*@
<div class="@NavMenuCssClass" >
    <nav class="flex-nav">
        <div class="nav-item px-2">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All" @onclick="ToggleNavMenu">
                Home
            </NavLink>
        </div>
        @foreach(var item in categoryService.Categories)
        {
            <div class="nav-item px-2">
                <NavLink class="nav-link" href="@item.Url" @onclick="ToggleNavMenu">
                    @item.Name
                </NavLink>
            </div>
        }
        <div class="dropdown nav-item px-2">
            <NavLink class="dropdown-toggle nav-link" href="#" role="button" data-bs-toggle="dropdown">
                Contact
            </NavLink>
            <div class="dropdown-menu dropdown-menu-dark py-0">
                <a class="dropdown-item nav-link" href="https://wa.me/82380539018" target="_blank">Whatsapp</a>
                <a class="dropdown-item nav-link" href="https://t.me/Dika_Akihira" target="_blank">Telegram</a>
                @*<span class="dropdown-item-text py-2">tik.dikawahyu123@gmail.com</span>*@
            </div>
        </div>
    </nav>
</div>
<div class="search nav-item px-3 pt-3">
    <Search />
</div>

@code {
    private bool collapseNavMenu = true;
    bool _isExpanded = false;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override async Task OnInitializedAsync()
    {
        await categoryService.GetCategories();
        categoryService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        categoryService.OnChange -= StateHasChanged;
    }
}
