@inject ICartService cartService
@inject ISyncLocalStorageService localStorage
@implements IDisposable

<AuthorizeView>
	@if (GetCartItemsCount() > 0)
	{
		<a href="cart" class="btn btn-outline-info text-decoration-none position-relative">
		@*<i class="oi oi-cart"></i>*@

			@*<span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
				@GetCartItemsCount()
			</span>*@
			<MudBadge Content="GetCartItemsCount()" Color="Color.Error" Overlap="true">
				<MudIcon Icon="@Icons.Material.Outlined.ShoppingCart" Color="Color.Info" Size="Size.Medium" />
			</MudBadge>
		</a>
	}
</AuthorizeView>

@code {
	private int GetCartItemsCount()
	{
		var count = localStorage.GetItem<int>("cartItemsCount");
		return count;
	}

	protected override async Task OnInitializedAsync()
	{
		await cartService.GetCartItemsCount();
		cartService.OnChange += StateHasChanged;
	}

	public void Dispose()
	{
		cartService.OnChange -= StateHasChanged;
	}
}
