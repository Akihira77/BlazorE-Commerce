@inherits LayoutComponentBase
@inject NavigationManager navigationManager
@implements IDisposable


<div class="page">
    <MudThemeProvider />
    <MudDialogProvider />
    <MudSnackbarProvider />

    <AuthorizeView Roles="Admin">
        <Authorized>
            @*@if(context.User.IsInRole("Admin"))
            {*@
            <main>
                <div class="top-row py-2">
                    <HomeButton Role="Admin" />
                    <div class="d-flex justify-content-end">
                        <MailButton />
                        <AdminButton />
                    </div>
                </div>
                <div class="d-flex" style="min-height: 100vh">
                    <div class="nav-menu pt-2" style="width: 15%">
                        <AdminNavMenu />
                    </div>

                    <article class="content px-2 pb-5" style="width: 85%">
                        @Body
                    </article>
                </div>
            </main>
        </Authorized>
            @*} else
            {*@
        <NotAuthorized>
            <main class="pb-5">
                <div class="top-row py-2">
                    <HomeButton />
                    <Search />
                    <UserButton />
                    <CartCounter />
                </div>
                <div class="nav-menu">
                    <ShopNavMenu />
                </div>

                <article class="content px-2">
                    @Body
                </article>
            </main>
            @*}*@
        </NotAuthorized>
    </AuthorizeView>
</div>

@code {
    private HubConnection? _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        // create connection
        _hubConnection = new HubConnectionBuilder()
                        .WithUrl(navigationManager.ToAbsoluteUri("/hubs/user"))
                        .WithAutomaticReconnect()
                        .Build();

        // start connections
        await _hubConnection.StartAsync();

        // invoke hub methods aka send notifications to hub
        if (_hubConnection.State == HubConnectionState.Connected)
        {
            await _hubConnection.SendAsync("CalculateUserView");
        }
    }

    public void Dispose()
    {
        _hubConnection?.DisposeAsync();
    }
    //private bool _isDarkMode;
    //private MudThemeProvider _mudThemeProvider;

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    if(firstRender)
    //    {
    //        _isDarkMode = await _mudThemeProvider.GetSystemPreference();
    //        StateHasChanged();
    //    }
    //}

    //private void ChangeState(bool state)
    //{
    //    _isDarkMode = state;
    //}
}