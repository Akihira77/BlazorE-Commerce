@inject IProductService productService
@implements IDisposable

@if (productService.Products == null 
		|| !productService.Products.Any())
{
	<span>@productService.Message</span>
} else {
	<ul class="list-unstyled">
		<Virtualize Items="productService.Products" Context="product" SpacerElement="li">
			<li class="media my-3">
				<div class="media-img-wrapper mr-2">
					<a href="/product/@product.Id">
						<img class="media-img" src="@product.ImageUrl" alt="@product.Title" />
					</a>
				</div>
				<div class="media-body d-flex flex-column">
					<a class="mb-1 text-decoration-underline text-primary" href="/product/@product.Id">
						<h4 class="mb-0">@product.Title</h4>
					</a>
					<p>@product.Description</p>
					<h5 class="price mt-auto">
						@GetPriceText(product)
					</h5>
				</div>
			</li>
		</Virtualize>
	</ul>
	for(int i = 1; i <= productService.PageCount; i++)
	{
		<a class="btn 
			@(i == productService.CurrentPage ? "btn-info" : "btn-outline-info") 
			page-selection"
			href="/search/@productService.LastSearchText/@i">
			@i
		</a>
	}
}
@code {
	protected override void OnInitialized()
	{
		productService.ProductsChanged += StateHasChanged;
	}

	public void Dispose()
	{
		productService.ProductsChanged -= StateHasChanged;
	}

	private string GetPriceText(Product product)
	{
		var variants = product.Variants.ToList();
		if (!variants.Any())
		{
			return string.Empty;
		} else if (variants.Count() == 1)
		{
			return $"${variants[0].Price}";
		}

		decimal minPrice = variants.Min(v => v.Price);
		return $"Starting at ${minPrice}";
	} 
}