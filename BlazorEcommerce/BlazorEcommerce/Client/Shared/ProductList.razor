@inject IProductService productService
@implements IDisposable

@if (productService.Products == null)
{
	<div class="container-fluid d-flex justify-content-center align-items-center" style="min-height: 70vh">
		<MudProgressCircular Color="Color.Primary" Indeterminate="true" />
	</div>
} else if (productService.Products.Count() == 0)
{
	<em>There is no product for this category</em>
} else {
	<ul class="list-unstyled d-flex flex-wrap justify-content-center">
		<Virtualize Items="productService.Products" Context="product" SpacerElement="li">
			<li class="m-2 product-card">
				<MudCard>
					<div class="d-flex justify-content-center">
						<a href="/product/@product.Id">
							@if (!string.IsNullOrEmpty(product.ImageUrl))
							{
								<img class="media-img" src="@product.ImageUrl" alt="@product.Title" />
							} else if (product.Images.Count > 0)
							{
								<img class="media-img" src="@product.Images[0].Data" alt="@product.Title" />
							}
						</a>
					</div>
					<MudCardContent Class="pt-2 pb-0 px-2">
						<div class="product-text d-flex flex-column">
							<a class="mb-1 product-title" href="/product/@product.Id">
								<p class="mb-0 product-title">@product.Title</p>
							</a>
							<MudText Class="d-flex flex-column pb-1 pe-1">
								<span class="product-price">@GetPriceText(product)</span>
								<span class="original-price text-decoration-line-through">@GetOriginalPriceText(product)</span>
							</MudText>
							<MudText id="rate" Class="align-items-end">
								<span class="">
									@if(GetProductRatingCount(product.Id) > 0)
									{
										<div class="d-flex text-secondary gap-1 align-items-center">
											<div class="">
												<i class="oi oi-star icon-rate text-warning"></i>
											</div>
											<div class="d-flex gap-1 align-items-center text">
												<span>@rate.ToString("#.0").Replace(',', '.')</span>
												<span>|</span>
												<span>@RateToString(ratingCount) user</span>
											</div>
										</div>
									}
								</span>
							</MudText>
						</div>
					</MudCardContent>
				</MudCard>
			</li>
		</Virtualize>
	</ul>
	for(int i = 1; i <= productService.PageCount; i++)
	{
		<a class="btn 
			@(i == productService.CurrentPage ? "btn-secondary" : "btn-outline-secondary") 
			page-selection"
			href="/search/@productService.LastSearchText/@i">
			@i
		</a>
	}

	<MudScrollToTop>
		<MudFab Color="Color.Dark" StartIcon="@Icons.Material.Filled.KeyboardArrowUp" />
	</MudScrollToTop>
}
@code {

	int ratingCount;
	decimal rate;
	protected override void OnInitialized()
	{
		productService.ProductsChanged += StateHasChanged;
	}

	public void Dispose()
	{
		productService.ProductsChanged -= StateHasChanged;
	}

	private int GetProductRatingCount(int productId)
	{
		var product = productService.Products.First(p => p.Id == productId);

		if (product.Ratings.Any())
		{
			ratingCount = product.Ratings.Count();

			rate = (decimal) product.Ratings.Average(pr => pr.Rate);

			return product.Ratings.Count();
		} else
		{
			return 0;
		}
	}

	private string GetPriceText(Product product)
	{
		var variants = product.Variants.ToList();
		if (!variants.Any())
		{
			return string.Empty;
		} else if (variants.Count() == 1)
		{
			return $"${variants[0].Price}";
		}

		decimal minPrice = variants.Min(v => v.Price);
		return $"${minPrice}";
	} 

	private string GetOriginalPriceText(Product product)
	{
		var variants = product.Variants.ToList();
		if(!variants.Any())
		{
			return string.Empty;
		}

		decimal originalPrice = variants.Min(p => p.OriginalPrice);
		return (originalPrice > 0? $"${originalPrice}" : string.Empty);
	}

	private string RateToString(int count)
	{
		if (count < 100) return count.ToString();
		else if (count <= 250) return "100+";
		else if (count < 500) return "250+";
		else if (count < 1000) return "500+";
		else return "1000+";
	}
}