@inject ILocalStorageService localStorage
@inject AuthenticationStateProvider authenticationStateProvider

<div class="dropdown">
	<button 
		@onclick="ToggleUserMenu" 
		@onfocusout="HideUserMenu" 
		class="btn btn-secondary dropdown-toggle user-button">
		<i class="oi oi-person"></i>
	</button>
	<div class="dropdown-menu dropdown-menu-start @UserMenuCssClass" style="min-width: auto">
		<AuthorizeView Roles="Admin,Customer">
			<Authorized>
				<a href="profile" class="dropdown-item">Profile</a>
				<a href="orders" class="dropdown-item">Orders</a>
				<button class="logout dropdown-item" @onclick="Logout">Logout</button>
			</Authorized>
			<NotAuthorized>
				<a href="login" class="dropdown-item">Login</a>
				<a href="register" class="dropdown-item">Register</a>
			</NotAuthorized>
		</AuthorizeView>
	</div>
</div>

@code {
	private bool showUserMenu = false;

	private string? UserMenuCssClass => showUserMenu ? "show-menu" : null;

	private void ToggleUserMenu()
	{
		showUserMenu = !showUserMenu;
	}

	private async Task HideUserMenu()
	{
		await Task.Delay(200);
		showUserMenu = false;
	}

	private async Task Logout()
	{
		await localStorage.RemoveItemAsync("authToken");
		await localStorage.RemoveItemAsync("cartItemsCount");
		await authenticationStateProvider.GetAuthenticationStateAsync();
	}
}
