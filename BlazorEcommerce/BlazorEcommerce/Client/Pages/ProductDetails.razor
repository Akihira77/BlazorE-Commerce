@page "/product/{id:int}"
@inject ISnackbar snackbar
@inject IProductService productService
@inject ICartService cartService
@inject IAuthService authService
@inject ILocalStorageService localStorage
@inject NavigationManager navigationManager

@if (product == null)
{
	<span>@message</span>
} else
{
	<div class="container pb-5 d-flex flex-column flex-lg-row flex-wrap flex-lg-nowrap overflow-hidden">
		<div class="container">
			<div class="row">
				<div class="col-12 col-lg-4 container-left">
					<div class="media-img-wrapper">
						@if (!string.IsNullOrEmpty(product.ImageUrl))
						{
							<img class="media-img" src="@product.ImageUrl" alt="@product.Title" />
						} else
						{
							<MudCarousel Class="" ItemsSource="product.Images" Style="height: 300px;" AutoCycle="false">
								<ItemTemplate>
									<MudImage Src="@context.Data" Style="max-height: 250px;"></MudImage>
								</ItemTemplate>
							</MudCarousel>
						}
					</div>
				</div>
				<div class="col-12 col-lg-8 media-body mr-4">
			<h2 class="mb-0 product-title">@product.Title</h2>
			@if(rate > 0)
			{
				<div class="d-flex text-secondary gap-1 align-items-center">
					<div class="">
						<MudIcon Icon="@Icons.Material.Filled.Star" Color="Color.Warning" Style="font-size: 1.1rem" Title="Rate" />
					</div>
					<div class="d-flex gap-1 align-items-center pt-1" style="font-size: .8rem">
						<span>@rate.ToString("#.0").Replace(',', '.')</span>
						<span>|</span>
						<span>@ratingCount user</span>
					</div>
				</div>
			}
			@if(product.Variants.Any())
			{
				<div class="mb-3 mt-2">
					<select class="form-select" @bind="currentTypeId">
						@foreach(var variant in product.Variants)
						{
							<option value="@variant.ProductTypeId">
								@variant.ProductType.Name
							</option>
						}
					</select>
				</div>
			}

			@if (GetSelectedVariant() != null)
			{
				var price = GetSelectedVariant();
				@if (price.OriginalPrice >= price.Price)
				{
					<h6 class="text-muted original-price">$@price.OriginalPrice</h6>
				}
				<h4 class="price">$@price.Price</h4>
			}
			<div class="container-mid overflow-scroll">
				<div class="mt-3" style="max-width: 700px">
					<h4>Description: </h4>
					<pre class="description ms-1 mt-2">@product.Description</pre>
				</div>
			</div>
		</div>
			</div>
			<div class="reviews-section row mt-5">
				<h5>Reviews</h5>
				<div class="row justify-content-between" style="min-height: 500px">
					<div class="col-12 col-lg-3">
						<div class="percentage d-flex flex-column">
							<div class="d-flex mx-auto align-items-center">
								<MudIcon Icon="@Icons.Material.Filled.Star" Color="Color.Warning" Style="font-size: 1.2rem" Title="Rate" />
								<span class="ps-2 pe-1 fs-3">
									@if (rate > 0)
									{
										@rate.ToString("#.0").Replace(',', '.')
									} else
									{
										@rate
									}
									<span style="font-size: 1rem !important;">/5.0</span>
								</span>
							</div>
							<div class="mx-auto">
								<span>@ratingCount rating</span>
							</div>
							<div class="d-flex flex-column px-5 pt-3 text-secondary">
								<div class="rate-5 d-flex flex-row align-items-center">
									<MudIcon Icon="@Icons.Material.Filled.Star" Color="Color.Warning" Style="font-size: .9rem" Title="Rate" />
									<span class="px-2">5</span>
									<MudProgressLinear Color="Color.Success" Rounded="true" Value="@Rate[4]" Max="@ratingCount" Size="Size.Medium" />
									<span class="ps-2">@Rate[4]</span>
								</div>
								<div class="rate-4 d-flex flex-row align-items-center">
									<MudIcon Icon="@Icons.Material.Filled.Star" Color="Color.Warning" Style="font-size: .9rem" Title="Rate" />
									<span class="px-2">4</span>
									<MudProgressLinear Color="Color.Success" Rounded="true" Value="@Rate[3]" Max="@ratingCount" Size="Size.Medium" />
									<span class="ps-2">@Rate[3]</span>
								</div>
								<div class="rate-3 d-flex flex-row align-items-center">
									<MudIcon Icon="@Icons.Material.Filled.Star" Color="Color.Warning" Style="font-size: .9rem" Title="Rate" />
									<span class="px-2">3</span>
									<MudProgressLinear Color="Color.Success" Rounded="true" Value="@Rate[2]" Max="@ratingCount" Size="Size.Medium" />
									<span class="ps-2">@Rate[2]</span>
								</div>
								<div class="rate-2 d-flex flex-row align-items-center">
									<MudIcon Icon="@Icons.Material.Filled.Star" Color="Color.Warning" Style="font-size: .9rem" Title="Rate" />
									<span class="px-2">2</span>
									<MudProgressLinear Color="Color.Success" Rounded="true" Value="@Rate[1]" Max="@ratingCount" Size="Size.Medium" />
									<span class="ps-2">@Rate[1]</span>
								</div>
								<div class="rate-1 d-flex flex-row align-items-center">
									<MudIcon Icon="@Icons.Material.Filled.Star" Color="Color.Warning" Style="font-size: .9rem" Title="Rate" />
									<span class="px-2">1</span>
									<MudProgressLinear Color="Color.Success" Rounded="true" Value="@Rate[0]" Max="@ratingCount" Size="Size.Medium" />
									<span class="ps-2">@Rate[0]</span>
								</div>
							</div>
						</div>
					</div>
					<div class="col-12  col-lg-8">
						@if (authUser != null)
						{
							<MudForm @ref="form" Class="py-3 d-flex flex-column">
								<MudRating @bind-SelectedValue="productRatings.Rate" ReadOnly="_isReadOnly" />
								<MudTextField T="string" @bind-Value="productRatings.Reviews" Lines="3" Variant="Variant.Text" Label="Give reviews" Clearable="_isClearable" ReadOnly="_isReadOnly"></MudTextField>
								<MudButton Class="ms-auto mt-3" Variant="Variant.Filled" Color="Color.Primary" OnClick="SubmitReviews">Submit</MudButton>
							</MudForm>
						}
						<div>
							@if(_pr.Count > 0)
							{
								<ul>
									@foreach(var item in _pr)
									{
										<li>
											<div class="d-flex flex-column">
												<div class="d-flex align-items-center">
													<MudRating ReadOnly="true" SelectedValue="item.Rate" Size="Size.Small" />
													<span class="ps-2">
														@GetTimeCreatedOn(item.CreatedOn) ago
													</span>
												</div>
												<div class="fw-bold">@item.UserName</div>
												<div>@item.TextReviews</div>
											</div>
										</li>
									}
								</ul>

								<div class="d-flex flex-column align-center">
									<MudPagination ShowFirstButton="true" ShowLastButton="true" Count="sizedPage" Class="mt-4" Selected="currentPage" SelectedChanged="((int value) => UpdatePagedData(value))" />
								</div>
							} else
							{
								<p>No reviews.</p>
							}
						</div>
					</div>
				</div>
			</div>
		</div>
		<div class="container-right">
			<MudCard Class="p-3 d-flex flex-column" Style="width: 100%;">
			<MudCardActions Class="mt-auto">
				<AuthorizeView>
					<Authorized>
						<MudButton FullWidth="true" Variant="Variant.Filled"
							   Color="Color.Success"
							   @onclick="@(() => AddToCart(product.Title))"
							   StartIcon="@Icons.Material.Filled.Add" Style="text-transform: none">
							Add to Cart
						</MudButton>
					</Authorized>
					<NotAuthorized>
						<MudButton FullWidth="true" Variant="Variant.Filled"
							   Color="Color.Success"
							   @onclick="@(() => navigationManager.NavigateTo("/login"))"
							   StartIcon="@Icons.Material.Filled.AddShoppingCart">
							Add to Cart
						</MudButton>
					</NotAuthorized>
				</AuthorizeView>
			</MudCardActions>
		</MudCard>
		</div>
	</div>
	
}

@code {
	[Parameter]
	public int Id { get; set; }

	private Product? product = null;
	private string message = "Loading product...";
	private int currentTypeId = 1;
	private int[] Rate = new int[5];
	List<string> pagedReviews;
	List<string> allData = new List<string>();
	List<ProductRatingsDto> _pr = new List<ProductRatingsDto>();
	private int currentPage = 1;
	private int sizedPage;

	int ratingCount;
	double rate = 0;

	ProductRatings productRatings = new ProductRatings();
	bool _isReadOnly = false;
	bool _isClearable = true;
	string? authUser;

	MudForm? form;

	protected override async Task OnParametersSetAsync()
	{
		var productResult = await productService.GetProduct(Id);

		message = productResult.Message;
		if (!productResult.Success) return;

		var productRatingsResult = await productService.GetProductRatings(Id);
		User user;
		product = productResult.Data;
		ratingCount = product.Ratings.Count();
		authUser = await localStorage.GetItemAsStringAsync("authToken");
		if (authUser != null)
		{
			user = await authService.GetUser(0);

			if(productRatingsResult.Data.Any(pr => pr.UserName == user.Email))
			{
				productRatings.Rate = productRatingsResult.Data
									.FirstOrDefault(pr => pr.UserName == user.Email).Rate;
				productRatings.Reviews = productRatingsResult.Data
									.FirstOrDefault(pr => pr.UserName == user.Email).TextReviews;

				_pr = productRatingsResult.Data
						.Where(pr => pr.UserName != user.Email)
						.ToList();

			}

		} else
		{
			_pr = productRatingsResult.Data.ToList();
		}

		productRatings.ProductId = Id;
		productRatings.Product = productResult.Data;
		sizedPage = (ratingCount / 10) + 1;

		if (ratingCount > 0) {
			rate = product.Ratings.Average(pr => pr.Rate);

			for (int i = 0; i < 5; i++)
			{
				Rate[i] = productRatingsResult.Data.Count(pr => pr.Rate == (i + 1));
			}

			
			UpdatePagedData(1);
		}

		var variants = product.Variants.ToList();
		if (product.Variants.Any())
		{
			currentTypeId = variants[0].ProductTypeId;
		}
	}

	private async Task SubmitReviews()
	{

		if (rate == 0)
		{
			snackbar.Add("Give rate first", Severity.Warning);
			return;
		}

		_isReadOnly = true;
		_isClearable = false;
		var response = await productService.SubmitReviews(productRatings);
		if (response.Success)
		{
			snackbar.Add(response.Message, Severity.Success);
		} else
		{
			snackbar.Add(response.Message, Severity.Error);
		}
	}

	private ProductVariant GetSelectedVariant()
	{
		var variant = product.Variants.FirstOrDefault(v => v.ProductTypeId == currentTypeId);
		return variant;
	}

	private async Task AddToCart(string title)
	{
		var productVariant = GetSelectedVariant();
		var cartItem = new CartItem
			{
				ProductId = productVariant.ProductId,
				ProductTypeId = productVariant.ProductTypeId
			};

		await cartService.AddToCart(cartItem);

		snackbar.Configuration.SnackbarVariant = Variant.Text;
		snackbar.Configuration.MaxDisplayedSnackbars = 2;
		snackbar.Add($"Added {title} ({GetSelectedVariant().ProductType.Name}) to cart", Severity.Success);
	}

	private void UpdatePagedData(int value)
	{
		currentPage = value;
		int pageSize = 10; // Change this to set the number of items per page
		int startIndex = (currentPage - 1) * pageSize;
		int endIndex = Math.Min(startIndex + pageSize, allData.Count);

		pagedReviews = allData.GetRange(startIndex, endIndex - startIndex);
	}

	private string GetTimeCreatedOn(DateTime dateTime)
	{
		var createdOn = (DateTime.Now - dateTime); 
		if(createdOn.TotalDays > 365)
		{
			return createdOn.Humanize(maxUnit: Humanizer.Localisation.TimeUnit.Year);
		} else if(createdOn.TotalDays > 30)
		{
			return createdOn.Humanize(maxUnit: Humanizer.Localisation.TimeUnit.Month);
		} else if(createdOn.TotalDays > 7)
		{
			return createdOn.Humanize(maxUnit: Humanizer.Localisation.TimeUnit.Week);
		} else if(createdOn.TotalDays >= 1)
		{
			return createdOn.Humanize(maxUnit: Humanizer.Localisation.TimeUnit.Day);
		} else if(createdOn.TotalHours >= 1)
		{
			return createdOn.Humanize(maxUnit: Humanizer.Localisation.TimeUnit.Hour);
		} else if(createdOn.TotalMinutes >= 1)
		{
			return createdOn.Humanize(maxUnit: Humanizer.Localisation.TimeUnit.Minute);
		} else
		{
			return createdOn.Humanize(maxUnit: Humanizer.Localisation.TimeUnit.Second);
		}
	}
}
