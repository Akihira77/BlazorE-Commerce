@page "/product/{id:int}"
@inject ISnackbar snackbar
@inject IProductService productService
@inject ICartService cartService
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navigationManager

@if (product == null)
{
	<span>@message</span>
} else
{
	<div class="container pb-5 d-flex flex-column flex-lg-row flex-wrap flex-lg-nowrap overflow-hidden">
		<div class="container-left">
			<div class="media-img-wrapper mr-2 ">
				@if (!string.IsNullOrEmpty(product.ImageUrl))
				{
					<img class="media-img" src="@product.ImageUrl" alt="@product.Title" />
				} else
				{
					<MudCarousel Class="mud-width-full" ItemsSource="product.Images" Style="height: 250px;" AutoCycle="false">
						<ItemTemplate>
							<MudImage Src="@context.Data" Style="height: 200px; width: 140px"></MudImage>
						</ItemTemplate>
					</MudCarousel>
				}
			</div>
		</div>
		<div class="ms-1 media-body mr-4">
			<h2 class="mb-0">@product.Title</h2>
			@if(rate > 0)
			{
				<div class="d-flex text-secondary gap-1 align-items-center">
					<div class="">
						<MudIcon Icon="@Icons.Material.Filled.Star" Color="Color.Warning" Style="font-size: 1.1rem" Title="Rate" />
					</div>
					<div class="d-flex gap-1 align-items-center pt-1" style="font-size: .8rem">
						<span>@rate.ToString("#.0").Replace(',', '.')</span>
						<span>|</span>
						<span>@ratingCount user</span>
					</div>
				</div>
			}
			@if(product.Variants.Any())
			{
				<div class="mb-3 mt-2">
					<select class="form-select" @bind="currentTypeId">
						@foreach(var variant in product.Variants)
						{
							<option value="@variant.ProductTypeId">
								@variant.ProductType.Name
							</option>
						}
					</select>
				</div>
			}

			@if (GetSelectedVariant() != null)
			{
				var price = GetSelectedVariant();
				@if (price.OriginalPrice >= price.Price)
				{
					<h6 class="text-muted original-price">$@price.OriginalPrice</h6>
				}
				<h4 class="price">$@price.Price</h4>
			}
			<div class="container-mid overflow-scroll">
				<div class="mt-3" style="max-width: 700px">
					<h4>Description: </h4>
					<pre class="description ms-1 mt-2">@product.Description</pre>
				</div>
			</div>
		</div>
		<div class="container-right">
			<MudCard Class="p-3 d-flex flex-column" Style="width: 100%">
@*			<MudCardContent>
				<MudText>Add to Cart</MudText>
			</MudCardContent>*@
			<MudCardActions Class="mt-auto">
				<AuthorizeView>
					<Authorized>
						<MudButton FullWidth="true" Variant="Variant.Filled"
							   Color="Color.Success"
							   @onclick="@(() => AddToCart(product.Title))"
							   StartIcon="@Icons.Material.Filled.AddShoppingCart">
							Add to Cart
						</MudButton>
					</Authorized>
					<NotAuthorized>
						<MudButton FullWidth="true" Variant="Variant.Filled"
							   Color="Color.Success"
							   @onclick="@(() => navigationManager.NavigateTo("/login"))"
							   StartIcon="@Icons.Material.Filled.AddShoppingCart">
							Add to Cart
						</MudButton>
					</NotAuthorized>
				</AuthorizeView>
			</MudCardActions>
		</MudCard>
		</div>
	</div>
}

@code {

	private Product? product = null;
	private string message = "Loading product...";
	private int currentTypeId = 1;

	int ratingCount;
	double rate = 0;

	[Parameter]
	public int Id { get; set; }

	protected override async Task OnParametersSetAsync()
	{
		var result = await productService.GetProduct(Id);

		message = result.Message;
		if (result.Success)
		{
			product = result.Data;
			ratingCount = product.Ratings.Count();
			if (ratingCount > 0) {
				rate = product.Ratings.Average(pr => pr.Rate);
			}

			var variants = product.Variants.ToList();
			if (product.Variants.Any())
			{
				currentTypeId = variants[0].ProductTypeId;
			}
		}
	}

	private ProductVariant GetSelectedVariant()
	{
		var variant = product.Variants.FirstOrDefault(v => v.ProductTypeId == currentTypeId);
		return variant;
	}

	private async Task AddToCart(string title)
	{
		var productVariant = GetSelectedVariant();
		var cartItem = new CartItem
			{
				ProductId = productVariant.ProductId,
				ProductTypeId = productVariant.ProductTypeId
			};

		await cartService.AddToCart(cartItem);

		snackbar.Configuration.SnackbarVariant = Variant.Text;
		snackbar.Configuration.MaxDisplayedSnackbars = 2;
		snackbar.Add($"Added {title} ({GetSelectedVariant().ProductType.Name}) to cart", Severity.Success);
	}
}
