@page "/product/{id:int}"
@using Blazorise
@inject IProductService productService
@inject ICartService cartService
@inject IBlazorHistoryService blazorHistory

@if (product == null)
{
	<span>@message</span>
} else
{
	<SnackbarStack @ref="snackbarStack" />
	<div class="media">
		<div class="media-img-wrapper mr-2">
			<img class="media-img" src="@product.ImageUrl" alt="@product.Title" />
		</div>
		<div class="media-body">
			<h2 class="mb-0">@product.Title</h2>
			<p>@product.Description</p>
			@if(product.Variants.Any())
			{
				<div class="mb-3">
					<select class="form-select" @bind="currentTypeId">
						@foreach(var variant in product.Variants)
						{
							<option value="@variant.ProductTypeId">
								@variant.ProductType.Name
							</option>
						}
					</select>
				</div>
			}

			@if (GetSelectedVariant() != null)
			{
				var price = GetSelectedVariant();
				@if (price.OriginalPrice >= price.Price)
				{
					<h6 class="text-muted original-price">$@price.OriginalPrice</h6>
				}
				<h4 class="price">$@price.Price</h4>
			}
			<Button 
				Color="Color.Primary" 
				Clicked="@AddToCart"
			>
				<i class="oi oi-cart"></i>
				&nbsp;&nbsp;&nbsp;Add to Cart
			</Button>
@*			<button class="btn btn-primary" @onclick="AddToCart">
				<i class="oi oi-cart"></i>
				&nbsp;&nbsp;&nbsp;Add to Cart
			</button>*@
			<button class="btn btn-success" @onclick="Back">
				Back
			</button>
		</div>
	</div>
}

@code {

	private Product? product = null;
	private string message = "Loading product...";
	private int currentTypeId = 1;

	[Parameter]
	public int Id { get; set; }

	SnackbarStack snackbarStack;

	protected override async Task OnParametersSetAsync()
	{
		var result = await productService.GetProduct(Id);

		message = result.Message;
		if (result.Success)
		{
			product = result.Data;
			var variants = product.Variants.ToList();
			if (product.Variants.Any())
			{
				currentTypeId = variants[0].ProductTypeId;
			}
		}
	}

	private ProductVariant GetSelectedVariant()
	{
		var variant = product.Variants.FirstOrDefault(v => v.ProductTypeId == currentTypeId);
		return variant;
	}

	private async Task AddToCart()
	{
		var productVariant = GetSelectedVariant();
		var cartItem = new CartItem
		{
			ProductId = productVariant.ProductId,
			ProductTypeId = productVariant.ProductTypeId
		};

		await cartService.AddToCart(cartItem);

		await snackbarStack.PushAsync("Success added item to cart!", SnackbarColor.Success);
	}

	private async Task Back()
	{
		await blazorHistory.Back();
	}
}
