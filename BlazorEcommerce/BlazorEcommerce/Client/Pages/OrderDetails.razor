@page "/orders/{orderId:int}"
@inject IOrderService orderService
@inject NavigationManager navigationManager
@inject ISnackbar snackbar
@attribute [Authorize]

@if(order == null)
{
	<div class="container-fluid d-flex justify-content-center align-items-center" style="min-height: 70vh">
		<MudProgressCircular Color="Color.Primary" Indeterminate="true" />
	</div>
} else
{
	<div class="d-flex justify-content-between mb-3">
		<h3>Order from @order.OrderDate.ToString("f", new CultureInfo("en-us"))</h3>
		<div class="d-flex gap-2 flex-column flex-sm-row">
			<MudTooltip 
				Text="This Invoice will be send to your Email" 
				Arrow="true" 
				Placement="Placement.Left"
				ShowOnFocus="false">
				<MudButton ButtonType="ButtonType.Button" OnClick="(() => Invoice(orderId))" Color="Color.Success" Variant="Variant.Filled">Invoice</MudButton>
			</MudTooltip>
		</div>
	</div>
	<div class="pb-5">
		@foreach(var product in order.Products)
		{
			<div class="container d-flex p-1">
				<div class="image-wrapper">
					<img src="@product.ImageUrl" class="image"/>
				</div>
				<div class="name flex-grow-1 p-1">
					<h6>
						<a href="/product/@product.ProductId" class="link-primary text-decoration-underline">
							@product.Title
						</a>
					</h6>
					<span>@product.ProductType</span>
					<br />
					<span>Quantity: @product.Quantity</span>
				</div>
				<div class="product-price">
					$@product.TotalPrice
				</div>
			</div>
		}
		<div class="product-price mt-5 me-5">
			Total: $@order.TotalPrice
		</div>
	</div>
}

@code {
	[Parameter]
	public int orderId { get; set; }

	OrderDetailsDto order = null;

	protected override async Task OnInitializedAsync()
	{
		order = await orderService.GetOrderDetails(orderId);
	}

	private async Task Invoice(int orderId) {
		var result = await orderService.Invoice(orderId);
		if (result)
		{
			snackbar.Add("Invoice has been sent to your Email", Severity.Success);
		} else
		{
			snackbar.Add("Sending Invoice failed", Severity.Error);
		}
	}

	private async Task CancelOrder()
	{
		await orderService.CancelOrder(orderId);
		navigationManager.NavigateTo("/orders", true);
	}

	private string GetMessage(int orderStatus)
	{
		switch(orderStatus)
		{
			case -1:
				return "Your order was cancelled";
			case 1:
				return "Your order has been delivered";
			default:
				return "Your order status is in processing";
		}
	}

	private string GetStatus(int orderStatus)
	{
		switch(orderStatus)
		{
			case -1:
				return "Cancelled";
			case 1:
				return "Delivered";
			default:
				return "Processing";
		}
	}

	private string GetStatusCss(int orderStatus)
	{
		switch(orderStatus)
		{
			case -1:
				return "bg-danger";
			case 1:
				return "bg-success";
			default:
				return "bg-warning";
		}
	}
}
