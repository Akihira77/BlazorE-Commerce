@page "/admin/product-types"
@inject IProductTypeService productTypeService
@inject ICategoryService categoryService
@implements IDisposable
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Admin | ProductType List</PageTitle>

<div class="header">
	<div class="col">Name</div>
	<div class="col">Category</div>
	<div class="col">Actions</div>
</div>

@foreach(var productType in productTypeService.ProductTypes)
{
	@if(productType.Editing)
	{
		<EditForm Model="editingProductType" OnSubmit="UpdateProductType">
			<div class="row">
				<div class="col">
					<MudTextField @bind-Value="editingProductType.Name" class="form-control" Label="Name" Margin="Margin.Dense" Variant="Variant.Outlined"></MudTextField>
				</div>
				<div class="col">
					<MudSelect Margin="Margin.Dense" T="int" @bind-Value="@editingProductType.CategoryId" Label="Category" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
						@foreach(var category in categoryService.AdminCategories)
						{
							<MudSelectItem Value="@category.Id">@category.Name</MudSelectItem>
						}
					</MudSelect>
				</div>
				<div class="col text-center">
					<MudIconButton ButtonType="ButtonType.Submit" Icon="@Icons.Material.Filled.CloudUpload" Variant="Variant.Filled" Color="Color.Success" />
					<MudIconButton Icon="@Icons.Material.Filled.Cancel" Variant="Variant.Filled" Color="Color.Error" @onclick="CancelEditing" />
				</div>
			</div>
		</EditForm>
	} else
	{
		<div class="row">
			<div class="col">
				@productType.Name
			</div>
			<div class="col text-center">
				@GetCategoryName(productType.CategoryId)
			</div>
			<div class="col text-center">
				<MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Color="Color.Info" aria-label="Edit" @onclick=@(() => EditProductType(productType)) />
				<MudIconButton data-bs-toggle="modal" data-bs-target="#exampleModal" Icon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Error" aria-label="Edit" @onclick=@(() => editingProductType = productType) />

				@*Modal*@
				<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
					<div class="modal-dialog modal-dialog-centered">
						<div class="modal-content">
							<div class="modal-header">
								<h1 class="modal-title fs-5" id="exampleModalLabel">Delete Confirmation</h1>
								<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
							</div>
							<div class="modal-body">
								Do you want to Delete <span class="fw-bold">@(editingProductType != null ? editingProductType.Name : null)?</span>
							</div>
							<div class="modal-footer">
								<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
								<button type="button" class="btn btn-danger" data-bs-dismiss="modal" @onclick=@(() => DeleteProductType(editingProductType.Id))>Delete</button>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	}
}
<MudButton Class="my-5" StartIcon="@Icons.Material.Filled.Add" Color="Color.Info" @onclick="CreateNewProductType" Variant="Variant.Filled">
	<MudText>Add New Product Type</MudText>
</MudButton>

@code {
	ProductType editingProductType = null;

	protected override async Task OnInitializedAsync()
	{
		await productTypeService.GetProductTypes();
		await categoryService.GetAdminCategories();
		productTypeService.OnChange += StateHasChanged;
	} 

	private string GetCategoryName(int categoryId)
	{
		var category = categoryService
				.AdminCategories
				.FirstOrDefault(c => c.Id == categoryId);
		return category.Name;
	}

	private void EditProductType(ProductType productType)
	{
		productType.Editing = true;
		editingProductType = productType;
	}

	private void CreateNewProductType()
	{
		editingProductType = productTypeService.CreateNewProductType();
	}

	private async Task UpdateProductType()
	{
		if (editingProductType.IsNew)
		{
			await productTypeService.AddProductTypes(editingProductType);
		} else
		{
			await productTypeService.UpdateProductTypes(editingProductType);
		}
		editingProductType = new ProductType();
	}
	private async Task CancelEditing()
	{
		editingProductType = new ProductType();
		await productTypeService.GetProductTypes();
	}

	private async Task DeleteProductType(int productTypeId)
	{
		await productTypeService.DeleteProductTypes(productTypeId);
	}
	public void Dispose()
	{
		productTypeService.OnChange -= StateHasChanged;
	}
}
