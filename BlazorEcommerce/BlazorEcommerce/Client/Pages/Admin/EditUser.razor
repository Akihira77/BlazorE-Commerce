@page "/admin/user/{userId:int}"
@inject IAuthService authService
@inject ISnackbar snackbar

<PageTitle>Admin | Update User</PageTitle>

@if (loading)
{
	<span>@message</span>
} else {
	<EditForm Model="user" OnValidSubmit="UpdateUser" class="d-flex flex-column">
		<DataAnnotationsValidator></DataAnnotationsValidator>

		<div class="mb-3">
			<MudTextField id="email" @bind-Value="user.Email" Label="Email" Variant="Variant.Outlined" ReadOnly Margin="Margin.Dense" />
		</div>
		<div class="mb-3">
			<MudSelect T="string" Label="Role" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" @bind-Value="user.Role" Margin="Margin.Dense">
				<MudSelectItem Value="@("Admin")" />
				<MudSelectItem Value="@("Customer")" />
			</MudSelect>
		</div>

		@*<button class="btn btn-primary ms-auto">Save</button>*@
		<MudButton ButtonType="ButtonType.Submit" Class="ms-auto" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Info" Size="Size.Medium">Save</MudButton>
	</EditForm>
}

@code {
	[Parameter]
	public int userId { get; set; }

	string message = "Loading...";
	bool loading = true;
	User user = new User();


	protected override async Task OnParametersSetAsync()
	{
		var dbUser = await authService.GetUser(userId);
		if (dbUser == null)
		{
			message = $"User with Id '{userId}' does not exist";
			return;
		}
		user = dbUser;
		loading = false;
	}

	private void OnSelect(ChangeEventArgs e)
	{
		user.Role = e.Value.ToString();
		Console.WriteLine(user.Role);
		Console.WriteLine(e.Value.ToString());
	}

	private async Task UpdateUser()
	{
		var result = await authService.ChangeRole(user);

		if (result.Success)
		{
			snackbar.Add($"Changes Role Success - {result.Data}", Severity.Success);
		} else {
			snackbar.Add($"Changes Role Failed - {result.Data}", Severity.Error);
		}
	}
}
