@page "/admin/orders"
@inject IOrderService orderService
@inject NavigationManager navigationManager
@inject ISnackbar snackbar
@inject IDialogService dialogService
@implements IDisposable
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Admin | Order List</PageTitle>

@if(orderService.AdminOrders == null)
{
	<div class="container-fluid d-flex justify-content-center align-items-center" style="min-height: 70vh">
		<MudProgressCircular Color="Color.Primary" Indeterminate="true" />
	</div>
} else
{
    <MudTable Items="@orderService.AdminOrders" Hover="true" SortLabel="Sort By">
        <ToolBarContent>
            <MudText Typo="Typo.h4">Order List</MudText>
        </ToolBarContent>
        <HeaderContent>
            <MudTh Class="text-center fw-bold">Email</MudTh>
            <MudTh Class="fw-bold">
                <div class="d-flex align-items-center justify-content-center">
                    Created
                    <div class="d-flex flex-column">
                        <MudIconButton Style="max-height: 14px" Size="Size.Small" OnClick="@(() => SortByDateCreated("ascending"))" Icon="@Icons.Material.Filled.ArrowDropUp" aria-label="ascending" />
                        <MudIconButton Style="max-height: 14px" Size="Size.Small" OnClick="@(() => SortByDateCreated("descending"))" Icon="@Icons.Material.Filled.ArrowDropDown" aria-label="ascending" />
                    </div>
                </div>
            </MudTh>
            <MudTh Class="fw-bold">
                <div class="d-flex align-items-center justify-content-center">
                    Price
                    <div class="d-flex flex-column">
                        <MudIconButton Style="max-height: 14px" Size="Size.Small" OnClick="@(() => SortByPrice("ascending"))" Icon="@Icons.Material.Filled.ArrowDropUp" aria-label="ascending" />
                        <MudIconButton Style="max-height: 14px" Size="Size.Small" OnClick="@(() => SortByPrice("descending"))" Icon="@Icons.Material.Filled.ArrowDropDown" aria-label="ascending" />
                    </div>
                </div>
            </MudTh>
            <MudTh Class="text-center fw-bold">Address</MudTh>
            <MudTh Class="text-center fw-bold">Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Email">@context.User.Email</MudTd>
            <MudTd Class="text-center" DataLabel="DateCreated">
                @context.Order.OrderDate.ToString("f", new CultureInfo("en-US"))
            </MudTd>
            <MudTd Class="text-center fw-bold" DataLabel="Price">
                @(context.Order.TotalPrice.ToString("c", new CultureInfo("en-US")))
            </MudTd>
            <MudTd Class="text-center" DataLabel="Address" Style="width: 375px">
                @if(context.User.Address == null)
                {
                    <span><em>User have not input Address</em></span>
                } else
                {
                    <span>@context.User.Address.Street</span>
                    <br />
                    <span>@context.User.Address.City, @context.User.Address.State, @context.User.Address.Zip</span>
                    <br />
                    <span>@context.User.Address.Country</span>
                    <br />
                }
            </MudTd>
            <MudTd DataLabel="Actions" Class="text-center">
                <MudTooltip Text="See Details" ShowOnFocus="false">
                    <button @onclick="(() => OrderDetail(context.Order.Id))">
                        <MudIcon Icon="@Icons.Material.Filled.Info" Color="Color.Info" Size="Size.Large"></MudIcon>
                    </button>
                </MudTooltip>
                @*@if (context.Order.OrderStatus == 0)
                {
                    <button @onclick="(() => SendOrder(context.Order.Id, context.User.Id))">
                        <MudIcon Icon="@Icons.Material.Filled.Send" Color="Color.Primary" Size="Size.Large"></MudIcon>
                    </button>
                } else if (context.Order.OrderStatus == 1)
                {
                    <MudTooltip Text="Order has been delivered" Arrow="true" Placement="Placement.Bottom">
                        <MudIcon Icon="@Icons.Material.Filled.Details" Color="Color.Success" Size="Size.Large"></MudIcon>
                    </MudTooltip>
                } else
                {
                    <button @onclick="(() => SeeDetails(context.Order.Id))">
                        <MudTooltip Text="Order has been cancelled" Arrow="true" Placement="Placement.Bottom">
                            <MudIcon Icon="@Icons.Material.Filled.CancelScheduleSend" Color="Color.Error" Size="Size.Large"></MudIcon>
                        </MudTooltip>
                    </button>
                }*@
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{50, 100}" />
        </PagerContent>
    </MudTable>
}

@code {
    private HubConnection? _hubConnection;

    private OrderDto item = new OrderDto();

    string _direction = "ascending";
    protected override async Task OnInitializedAsync()
    {
        await orderService.GetAdminOrders();
        orderService.OnChange += StateHasChanged;

        _hubConnection = new HubConnectionBuilder()
                        .WithUrl(navigationManager.ToAbsoluteUri("/hubs/user"))
                        .WithAutomaticReconnect()
                        .Build();

        _hubConnection.On<string>("userCheckout", (incomingMessage) =>
        {
            snackbar.Add(incomingMessage, Severity.Info, config =>
            {
                config.RequireInteraction = true;
                config.ShowCloseIcon = false;
                config.Onclick = e =>
                {
                    navigationManager.NavigateTo(navigationManager.Uri, true);
                    return Task.CompletedTask;
                };
            });
        });

        await _hubConnection.StartAsync();
    }

    public void Dispose()
    {
        orderService.OnChange -= StateHasChanged;
        _hubConnection?.DisposeAsync();
    }

    private void SortByPrice(string direction)
    {
        if (direction.ToLower().Equals("ascending"))
        {
            orderService.AdminOrders = orderService.AdminOrders.OrderBy(ao => ao.Order.TotalPrice).ToList();
            _direction = "descending";
        } else
        {
            orderService.AdminOrders = orderService.AdminOrders.OrderByDescending(ao => ao.Order.TotalPrice).ToList();
            _direction = "ascending";
        }
    }

    private void SortByDateCreated(string direction)
    {
        if(direction.ToLower().Equals("ascending"))
        {
            orderService.AdminOrders = orderService.AdminOrders.OrderBy(ao => ao.Order.OrderDate).ToList();
            _direction = "descending";
        } else
        {
            orderService.AdminOrders = orderService.AdminOrders.OrderByDescending(ao => ao.Order.OrderDate).ToList();
            _direction = "ascending";
        }
    }

    private async Task OrderDetail(int orderId)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var parameters = new DialogParameters { ["OrderId"] = orderId };

        var dialog = await dialogService.ShowAsync<AdminOrderDetailsDialog>($"Details order ID {orderId}", parameters, options);
    }

    private async Task SeeDetails(int orderId)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var parameters = new DialogParameters { ["OrderId"] = orderId };

        var dialog = await dialogService.ShowAsync<OrderCancelDetails>($"Details order cancel ID {orderId}", parameters, options);
    }

    private async Task SendOrder(int orderId, int userId)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var parameters = new DialogParameters 
        { 
            ["OrderId"] = orderId, 
            ["UserId"] = userId
        };

        var dialog = await dialogService.ShowAsync<SendFormDialog>($"Send Order {orderId}", parameters, options);
    }
}
