@page "/admin/users"
@inject IAuthService authService
@inject NavigationManager navigationManager
@implements IDisposable
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Admin | User List</PageTitle>

@if (authService.AdminUsers == null)
{
    <div class="container-fluid d-flex justify-content-center align-items-center" style="min-height: 70vh">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    </div>
} else {
    <MudTable 
        Items="@authService.AdminUsers" 
        Hover="true" 
        Filter="new Func<UserDto, bool>(SearchUserCommand)">
        <ToolBarContent>
            <MudText Typo="Typo.h4">User List</MudText>
            <MudSpacer />
            <MudTextField 
                @bind-Value="search" 
                Placeholder="Search User By Name, Email, or Address" 
                Adornment="Adornment.Start" 
                AdornmentIcon="@Icons.Material.Filled.Search" 
                IconSize="Size.Medium" 
                Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh Class="text-center fw-bold">Nr</MudTh>
            <MudTh Class="text-center fw-bold">Name</MudTh>
            <MudTh Class="text-center fw-bold">Email</MudTh>
            <MudTh Class="text-center fw-bold">Date Created</MudTh>
            <MudTh Class="text-center fw-bold">Address</MudTh>
            <MudTh Class="text-center fw-bold">Role</MudTh>
            <MudTh Class="text-center fw-bold">Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nr" Class="text-center">@context.Nr</MudTd>
            <MudTd DataLabel="Name" Class="text-center">
                @if (context.User.Address == null)
                {
                    <span><em>User have not input Name</em></span>
                } else
                {
                    <span>
                        @(context.User.Address.FirstName + " " + context.User.Address.LastName)
                    </span>
                }
            </MudTd>
            <MudTd DataLabel="Email">@context.User.Email</MudTd>
            <MudTd DataLabel="DateCreated" Class="text-center">@(context.User.DateCreated.ToShortDateString())
            </MudTd>
            <MudTd DataLabel="Address" Class="text-center" Style="width: 350px">
                @if (context.User.Address == null)
                {
                    <span><em>User have not input Address</em></span>
                } else {
                    <span>@context.User.Address.Street</span>
                    <br />
                    <span>@context.User.Address.City, @context.User.Address.State, @context.User.Address.Zip</span>
                    <br />
                    <span>@context.User.Address.Country</span>
                    <br />
                }
            </MudTd>
            <MudTd DataLabel="Role" Class="text-center">@context.User.Role</MudTd>
            <MudTd DataLabel="Actions" Class="text-center">
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Color="Color.Info" @onclick="@(() => EditUser(context.User.Id))" />
				<MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Error" data-bs-toggle="modal" data-bs-target="#exampleModal" @onclick="@(() => item = context.User)" />

                @*Modal*@
				<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
					<div class="modal-dialog modal-dialog-centered">
						<div class="modal-content">
							<div class="modal-header">
								<h1 class="modal-title fs-5" id="exampleModalLabel">Delete Confirmation</h1>
								<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
							</div>
							<div class="modal-body">
								Do you want to Delete <span class="fw-bold">@(item != null ? item.Email : null)?</span>
							</div>
							<div class="modal-footer">
								<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
								<button type="button" class="btn btn-danger" data-bs-dismiss="modal" @onclick="@(() => DeleteUser(item))">Delete</button>
							</div>
						</div>
					</div>
				</div>
			</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}
@code {
    private string search = string.Empty;
    private User item = null;
    private IEnumerable<UserDto> items = new List<UserDto>();

    protected override async Task OnInitializedAsync()
    {
        await authService.GetUserList();
        items = authService.AdminUsers;
        authService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        authService.OnChange -= StateHasChanged;
    }

    private void EditUser(int userId)
    {
        navigationManager.NavigateTo($"/admin/user/{userId}");
    }

    private async Task DeleteUser(User user) {
        await authService.DeleteUser(user);
    }

    private bool SearchUserCommand(UserDto element) => SearchUser(element, search);

    private bool SearchUser(UserDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        // search first or last name
        if (element.User.Address.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || element.User.Address.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        // search email
        if (element.User.Email.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        // search address
        if (element.User.Address.Country.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.User.Address.State.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }
}