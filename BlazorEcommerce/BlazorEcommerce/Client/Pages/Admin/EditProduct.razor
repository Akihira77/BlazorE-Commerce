@page "/admin/add-product"
@page "/admin/edit-product/{Id:int}/{categoryId:int}"
@using System.Net.Http.Headers;
@inject IProductService productService
@inject IProductTypeService productTypeService
@inject ICategoryService categoryService
@inject NavigationManager navigationManager
@inject ISnackbar snackbar
@attribute [Authorize(Roles = "Admin")]


@if(loading)
{
	<span>@message</span>
} else
{
	<div class="d-flex justify-content-between mb-3">
		@if(product.Editing)
		{
			<h3>Edit "@product.Title"</h3>
		} else if (product.IsNew)
		{
			<h3>Create a new Product</h3>
		}
		<MudButton 
			ButtonType="ButtonType.Button" 
			Variant="Variant.Filled" 
			Color="Color.Success" 
			@onclick=@(() => navigationManager.NavigateTo("admin/products")) 
			Size="Size.Small" 
			StartIcon="@Icons.Material.Filled.ArrowBack"
			Style="max-height: 40px">Back</MudButton>
	</div>
	<EditForm Model="product" OnValidSubmit="AddOrUpdateProduct">
		<DataAnnotationsValidator></DataAnnotationsValidator>
		<div class="mb-3">
			<MudTextField 
				Margin="Margin.Dense" 
				@bind-Value="product.Title" 
				Label="Title" 
				Variant="Variant.Outlined"
				Clearable="true"
				Immediate="true"></MudTextField>
		</div>
		<div class="mb-3">
			<MudTextField 
				Margin="Margin.Dense" 
				@bind-Value="product.ImageUrl" 
				Label="Image Url" 
				Variant="Variant.Outlined"
				Clearable="true"
				Immediate="true"></MudTextField>
		</div>
		<div class="mb-3 d-flex flex-wrap flex-row justify-content-center gap-3">
			@if (!string.IsNullOrEmpty(product.ImageUrl))
			{
				<img src="@product.ImageUrl" />
			} else
			{
				foreach(var image in product.Images)
				{
					<MudCard>
						<MudCardContent>
							<MudImage 
								Src="@image.Data" 
								Height="200" 
								Width="140">
							</MudImage>
						</MudCardContent>
						<MudCardActions Style="justify-content: center">
							<MudButton 
								Variant="Variant.Filled" 
								Color="Color.Error" 
								OnClick="@(() => RemoveImage(image.Id))">
								Remove
							</MudButton>
						</MudCardActions>
					</MudCard>
				}
			}
		</div>
		<div class="mb-3">
			<InputFile 
				id="fileInput" 
				OnChange="OnFilesChange" 
				hidden 
				multiple 
				accept=".jpg,.png,.jpeg" />
			<MudButton HtmlTag="label"
					Variant="Variant.Filled"
					Color="Color.Primary"
		for="fileInput"
				   StartIcon="@Icons.Material.Filled.CloudUpload">
				Upload Images 
			</MudButton>

			@if(!string.IsNullOrEmpty(ErrorMessage))
			{
				<div class="text-danger"><p>@ErrorMessage</p></div>
			}
		</div>
		<div class="mb-3">
			<label for="description">Description</label>
			<InputTextArea 
				style="min-height: 250px;" 
				id="description" 
				@bind-Value="product.Description" 
				class="form-control"
				></InputTextArea>
		</div>

		<div class="mb-3">
			<MudSelect 
				Margin="Margin.Dense" 
				T="int" 
				Value="@product.CategoryId" 
				ValueChanged="@((int value) => CategoryChange(value))" 
				Label="Category" 
				Variant="Variant.Outlined" 
				AnchorOrigin="Origin.BottomCenter">
				@foreach(var category in categoryService.AdminCategories)
				{
					<MudSelectItem Value="@category.Id">@category.Name</MudSelectItem>
				}
			</MudSelect>
		</div>

		@if (product.CategoryId != 0
			&& (productTypeService.ProductTypes != null
				&& productTypeService.ProductTypes.Count() > 0))
		{
			@foreach (var variant in product.Variants)
			{
				<div class="row">
					<div class="col">
						<MudSelect 
							Margin="Margin.Dense" 
							T="int" 
							@bind-Value="@variant.ProductTypeId" 
							Label="Variant"
							Variant="Variant.Outlined" 
							Disabled="@variant.Deleted" 
							AnchorOrigin="Origin.BottomCenter">
							@foreach (var productType in productTypeService.ProductTypes)
							{
								<MudSelectItem Value="@productType.Id">@productType.Name</MudSelectItem>
							}
						</MudSelect>
					</div>
					<div class="col">
						<MudNumericField 
							Margin="Margin.Dense" 
							Min="0" 
							Disabled="@variant.Deleted" 
							@bind-Value="variant.Price" 
							Label="Price($)" 
							Variant="Variant.Outlined"></MudNumericField>
					</div>
					<div class="col">
						<MudNumericField 
							Margin="Margin.Dense" 
							Min="0" 
							Disabled="@variant.Deleted" 
							@bind-Value="variant.OriginalPrice" 
							Label="Original Price($)" 
							Variant="Variant.Outlined"></MudNumericField>
					</div>
					<div class="col col-visible d-flex align-items-center justify-content-center">
						<MudCheckBox 
							Disabled="@variant.Deleted" 
							@bind-Checked="variant.Visible" 
							Color="Color.Primary" 
							UnCheckedColor="Color.Default" 
							Label="Visible"></MudCheckBox>
					</div>
					<div class="col col-visible d-flex align-items-center justify-content-center">
						<MudIconButton 
							Icon="@Icons.Material.Filled.Delete" 
							Variant="Variant.Filled" 
							Color="Color.Error" 
							Size="Size.Medium" 
							OnClick="@(() => RemoveVariant(variant.ProductTypeId))" />
					</div>
				</div>
			}
			<div class="mb-3">
				<MudButton 
					OnClick="AddVariant" 
					Color="Color.Info" 
					Variant="Variant.Filled" 
					StartIcon="@Icons.Material.Filled.Add">
				Add Variant
			</MudButton>
			</div>
		}

		<hr />
		<div class="">
			<MudCheckBox 
				@bind-Checked="product.Featured" 
				Color="Color.Primary" 
				UnCheckedColor="Color.Default" 
				Label="Featured"></MudCheckBox>
		</div>
		<div class="">
			<MudCheckBox 
				@bind-Checked="product.Visible" 
				Color="Color.Primary" 
				UnCheckedColor="Color.Default" 
				Label="Visible"></MudCheckBox>
		</div>
		<hr />
		<button type="submit" class="btn btn-primary float-end">@btnText</button>
		<ValidationSummary></ValidationSummary>
	</EditForm>
}

@code {
	[Parameter]
	public int Id { get; set; }
	[Parameter]
	public int categoryId { get; set; }

	Product product = new Product();
	bool loading = true;
	string btnText = "";
	string message = "Loading...";
	int maxAllowedFiles = 5;
	long maxFileSize = 1024 * 1024 * 2; // 2 MB
	string ErrorMessage = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		await categoryService.GetAdminCategories();
	}

	private async Task CategoryChange(int categoryId)
	{
		product.CategoryId = categoryId;
		await productTypeService.GetProductTypesByCategory(categoryId);
	}

	protected override async Task OnParametersSetAsync()
	{
		if (Id == 0)
		{
			product = new Product { IsNew = true };
			btnText = "Create Product";
			await productTypeService.GetProductTypes();
		} else
		{
			Product dbProduct = (await productService.GetProduct(Id)).Data;

			if (dbProduct == null)
			{
				message = $"Product with Id '{Id}' does not exist!";
				return;
			}
			//product.CategoryId = dbProduct.CategoryId;
			await productTypeService.GetProductTypesByCategory(categoryId);
			product = dbProduct;
			product.Editing = true;
			btnText = "Update Product";
		}
		loading = false;
	}

	void RemoveVariant(int productTypeId)
	{
		var variant = product.Variants
				.FirstOrDefault(v => v.ProductTypeId == productTypeId);

		if (variant == null)
		{
			return;
		}

		if(variant.IsNew)
		{
			var newProductVariants = product.Variants.ToList();
			newProductVariants.Remove(variant);

			product.Variants = newProductVariants.AsEnumerable();
		} else
		{
			variant.Deleted = true;
		}
	}

	void AddVariant()
	{
		var newProductVariants = product.Variants.ToList();
		newProductVariants.Add(new ProductVariant { IsNew = true, ProductId = product.Id });

		product.Variants = newProductVariants.AsEnumerable();
	} 

	async Task AddOrUpdateProduct()
	{
		if (product.IsNew) {
			var result = await productService.CreateProduct(product);

			snackbar.Configuration.SnackbarVariant = Variant.Text;
			snackbar.Add("Create new product is success", Severity.Success);

			await Task.Delay(1000);
			navigationManager.NavigateTo("admin/products", true);
		} else
		{
			product.IsNew = false;
			product = await productService.UpdateProduct(product);

			snackbar.Configuration.SnackbarVariant = Variant.Text;
			snackbar.Add($"Update {product.Title} is success", Severity.Success);

			await Task.Delay(1000);
			navigationManager.NavigateTo($"admin/edit-product/{product.Id}/{categoryId}", true);
		}
	}

	private async Task UploadFiles(IReadOnlyList<IBrowserFile> files)
	{
		ErrorMessage = "";
		if (files.Count > maxAllowedFiles)
		{
			ErrorMessage = $"Only {maxAllowedFiles} files can be uploaded";
			return;
		}

		var format = "image/png";
		using var content = new MultipartFormDataContent();
		foreach(var image in files)
		{
			if(image.Size > maxFileSize)
			{
				ErrorMessage = $"The image files is too big Your Image : {image.Size}, it must less than {maxFileSize}";
				return;
			}

			var resizedImage = await image.RequestImageFileAsync(format, 200, 200);
			var buffer = new byte[resizedImage.Size];
			await resizedImage.OpenReadStream().ReadAsync(buffer);
			var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";

			product.Images.Add(new Image { Data = imageData });
		}
	}

	async Task OnFilesChange(InputFileChangeEventArgs e)
	{
		ErrorMessage = "";
		if (e.FileCount > maxAllowedFiles)
		{
			ErrorMessage = $"Only {maxAllowedFiles} files can be uploaded";
			return;
		}

		var format = "image/png";
		using var content = new MultipartFormDataContent();
		foreach(var image in e.GetMultipleFiles(maxAllowedFiles))
		{
			if (image.Size > maxFileSize)
			{
				ErrorMessage = $"The image files is too big Your Image : {image.Size}, it must less than {maxFileSize}";
				return;
			}

			var resizedImage = await image.RequestImageFileAsync(format, 200, 200);
			var buffer = new byte[resizedImage.Size];
			await resizedImage.OpenReadStream().ReadAsync(buffer);
			var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";

			product.Images.Add(new Image { Data = imageData });
		}
	}

	void RemoveImage(int imageId)
	{
		var image = product.Images.FirstOrDefault(i => i.Id == imageId);

		if (image != null)
		{
			product.Images.Remove(image);
		}
	}
}
