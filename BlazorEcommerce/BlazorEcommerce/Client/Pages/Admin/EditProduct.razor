@page "/admin/product"
@page "/admin/product/{id:int}"
@inject IProductService productService
@inject IProductTypeService productTypeService
@inject ICategoryService categoryService
@inject NavigationManager navigationManager
@inject ISnackbar snackbar

@if(loading)
{
	<span>@message</span>
} else
{
	<div class="d-flex justify-content-between">
		@if(product.Editing)
		{
			<h3>Edit "@product.Title"</h3>
		} else if (product.IsNew)
		{
			<h3>Create a new Product</h3>
		}
		<button class="btn btn-success" @onclick=@(() => navigationManager.NavigateTo("admin/products"))>Back</button>
	</div>
	<EditForm Model="product" OnValidSubmit="AddOrUpdateProduct" class="mb-5">
		<DataAnnotationsValidator></DataAnnotationsValidator>
		<div class="mb-0">
			<label for="title">Title</label>
			<InputText id="title" @bind-Value="product.Title" class="form-control"></InputText>
		</div>
		<div class="mb-0">
			<label for="imageUrl">Image Url</label>
			<InputText id="imageUrl" @bind-Value="product.ImageUrl" class="form-control"></InputText>
		</div>
		<div class="mb-0">
			<img src="@product.ImageUrl" />
		</div>
		<div class="mb-0">
			<label for="description">Description</label>
			<InputTextArea id="description" @bind-Value="product.Description" class="form-control"></InputTextArea>
		</div>
		<hr />
		<div class="header">
			<div class="col">Product Type / Variant</div>
			<div class="col">Price</div>
			<div class="col">Original Price</div>
			<div class="col">Visible</div>
			<div class="col"></div>
		</div>
		@foreach(var variant in product.Variants)
		{
			<div class="row">
				<div class="col">
					<InputSelect disabled="@variant.Deleted" @bind-Value="variant.ProductTypeId" class="form-control">
						@foreach(var productType in productTypeService.ProductTypes)
						{
							<option value="@productType.Id.ToString()">@productType.Name</option>
						}
					</InputSelect>
				</div>
				<div class="col">
					<InputNumber @bind-Value="variant.Price" class="form-control" disabled="@variant.Deleted"></InputNumber>
				</div>
				<div class="col">
					<InputNumber @bind-Value="variant.OriginalPrice" class="form-control" disabled="@variant.Deleted"></InputNumber>
				</div>
				<div class="col col-visible d-flex align-items-center justify-content-center">
					<InputCheckbox @bind-Value="variant.Visible" style="transform: scale(1.5, 1.5)" disabled="@variant.Deleted"></InputCheckbox>
				</div>
				<div class="col">
					<button class="btn btn-danger" disabled="@variant.Deleted" @onclick="@(() => RemoveVariant(variant.ProductTypeId))">
						<i class="oi oi-trash"></i>
					</button>
				</div>
			</div>
		}
		<button type="button" class="btn btn-primary" @onclick="AddVariant"> 
			<i class="oi oi-plus"></i> Add Variant
		</button>
		<hr />
		<div class="mb-0">
			<label for="category">Category</label>
			<InputSelect id="category" @bind-Value="product.CategoryId" class="form-control"> 
				@foreach(var category in categoryService.AdminCategories)
				{
					<option value="@category.Id">@category.Name</option>
				}
			</InputSelect>
		</div>
		<hr />
		<div class="form-check">
			<InputCheckbox id="featured" @bind-Value="product.Featured" class="form-check-input"></InputCheckbox>
			<label for="featured" class="form-check-label">Featured</label>
		</div>
		<div class="form-check">
			<InputCheckbox id="visible" @bind-Value="product.Visible" class="form-check-input"></InputCheckbox>
			<label for="visible" class="form-check-label">Visible</label>
		</div>
		<hr />
		<button type="submit" class="btn btn-primary float-end">@btnText</button>
		<ValidationSummary></ValidationSummary>
	</EditForm>
}

@code {
	[Parameter]
	public int Id { get; set; }

	Product product = new Product();
	bool loading = true;
	string btnText = "";
	string message = "Loading...";

	protected override async Task OnInitializedAsync()
	{
		await productTypeService.GetProductTypes();
		await categoryService.GetAdminCategories();
	}

	protected override async Task OnParametersSetAsync()
	{
		if (Id == 0)
		{
			product = new Product { IsNew = true };
			btnText = "Create Product";
		} else
		{
			Product dbProduct = (await productService.GetProduct(Id)).Data;

			if (dbProduct == null)
			{
				message = $"Product with Id '{Id}' does not exist!";
				return;
			}
			product = dbProduct;
			product.Editing = true;
			btnText = "Update Product";
		}
		loading = false;
	}

	void RemoveVariant(int productTypeId)
	{
		var variant = product.Variants
		.FirstOrDefault(v => v.ProductTypeId == productTypeId);

		if (variant == null)
		{
			return;
		}

		if (variant.IsNew)
		{
			var newProductVariants = product.Variants.ToList();
			newProductVariants.Remove(variant);

			product.Variants = newProductVariants.AsEnumerable();
		} else
		{
			variant.Deleted = true;
		}
	}

	void AddVariant()
	{
		var newProductVariants = product.Variants.ToList();
		newProductVariants.Add(new ProductVariant { IsNew = true, ProductId = product.Id });

		product.Variants = newProductVariants.AsEnumerable();
	} 

	async Task AddOrUpdateProduct()
	{
		if (product.IsNew) {
			var result = await productService.CreateProduct(product);
			navigationManager.NavigateTo("admin/products");

			snackbar.Configuration.SnackbarVariant = Variant.Text;
			snackbar.Add("Create new product is success", Severity.Success);
		} else
		{
			product.IsNew = false;
			product = await productService.UpdateProduct(product);
			navigationManager.NavigateTo($"admin/product/{product.Id}");

			snackbar.Configuration.SnackbarVariant = Variant.Text;
			snackbar.Add($"Update {product.Title} is success", Severity.Success);
		}
	}
}
