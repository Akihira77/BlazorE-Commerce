@page "/admin/products"
@inject IProductService productService
@inject NavigationManager navigationManager
@inject ISnackbar snackbar
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Admin | Product List</PageTitle>

@if(productService.AdminProducts == null)
{
	<div class="container-fluid d-flex justify-content-center align-items-center" style="min-height: 70vh">
		<MudProgressCircular Color="Color.Primary" Indeterminate="true" />
	</div>
} else
{
	<button class="btn btn-primary my-5 float-end" @onclick="CreateNewProduct">
		<i class="oi oi-plus"></i> Add New Product
	</button>

	<MudTable Hover="true" Virtualize="true" Items="@items" Filter="new Func<Product,bool>(FilterFunc1)">
		<ToolBarContent>
			<MudText Typo="Typo.h4">Product List</MudText>
			<MudSpacer />
			<MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
		</ToolBarContent>
		<HeaderContent>
			<MudTh Class="text-center">Image</MudTh>
			<MudTh Class="text-center">Product</MudTh>
			<MudTh Class="text-center">Stock</MudTh>
			<MudTh Class="text-center">Category</MudTh>
			<MudTh Class="text-center">Variants</MudTh>
			<MudTh Class="text-center">Price ($)</MudTh>
			<MudTh Class="text-center">Visible</MudTh>
			<MudTh Class="text-center">Deleted</MudTh>
			<MudTh Class="text-center">Actions</MudTh>
		</HeaderContent>
		<RowTemplate>
			<MudTd DataLabel="Image" Class="text-center">
				@if(!string.IsNullOrEmpty(context.ImageUrl))
				{
					<img src="@context.ImageUrl" />
				} else if(context.Images.Count > 0)
				{
					<img src="@context.Images[0].Data" />
				}
			</MudTd>
			<MudTd DataLabel="Product">@context.Title</MudTd>
			<MudTd DataLabel="Stock" Class="text-center">@context.Stock</MudTd>
			<MudTd DataLabel="Category" Class="text-center">@context.Category.Name</MudTd>
			<MudTd DataLabel="Variants" Class="text-center">
				@foreach(var variant in context.Variants)
				{
					<span>@variant.ProductType.Name</span>

					<br />
				}
			</MudTd>
			<MudTd DataLabel="Price" Class="text-center">
				@foreach(var variant in context.Variants)
				{
					<span>@variant.Price</span>

					<br />
				}
			</MudTd>
			<MudTd DataLabel="Visible" Class="text-center">
				@if(context.Visible)
				{
					<MudIcon Icon="@Icons.Material.Filled.Check" Size="Size.Medium" Color="Color.Success" />
				} else
				{
					<MudIcon Icon="@Icons.Material.Filled.Close" Size="Size.Medium" Color="Color.Error" />
				}
			</MudTd>
			<MudTd DataLabel="Deleted" Class="text-center">
				@if(context.Deleted)
				{
					<MudIcon Icon="@Icons.Material.Filled.Check" Size="Size.Medium" Color="Color.Success" />
					@*<i class="oi oi-check" style="transform : scale(1.5, 1.5);"></i>*@
				} else
				{
					<MudIcon Icon="@Icons.Material.Filled.Close" Size="Size.Medium" Color="Color.Error" />
				}
			</MudTd>
			<MudTd DataLabel="Actions" Class="text-center">
				<button class="btn btn-primary" @onclick="@(() => EditProduct(context.Id))">
					<i class="oi oi-pencil"></i>
				</button>
				<button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#exampleModal" @onclick="@(() => item = context)">
					<i class="oi oi-trash"></i>
				</button>

				<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
					<div class="modal-dialog modal-dialog-centered">
						<div class="modal-content">
							<div class="modal-header">
								<h1 class="modal-title fs-5" id="exampleModalLabel">Delete Confirmation</h1>
								<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
							</div>
							<div class="modal-body">
								Do you want to Delete <span class="fw-bold">@(item != null ? item.Title : null)?</span>
							</div>
							<div class="modal-footer">
								<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
								<button type="button" class="btn btn-danger" data-bs-dismiss="modal" @onclick="@(() => DeleteProduct(item))">Delete</button>
							</div>
						</div>
					</div>
				</div>
			</MudTd>
		</RowTemplate>
		<PagerContent>
			<MudTablePager />
		</PagerContent>
	</MudTable>
}

@code {
	private Product item = null;
	private IEnumerable<Product> items = new List<Product>();
	private string searchString1 = "";

	protected override async Task OnInitializedAsync()
	{
		await productService.GetAdminProducts();
		items = productService.AdminProducts;
	}

	void EditProduct(int productId)
	{
		navigationManager.NavigateTo($"admin/product/{productId}");
	}

	void CreateNewProduct()
	{
		navigationManager.NavigateTo("admin/product");
	}

	async Task DeleteProduct(Product product)
	{
		var result = await productService.DeleteProduct(product);

		if(result.Data)
		{
			navigationManager.NavigateTo("admin/products", true);
		} else
		{
			snackbar.Add(result.Message, Severity.Error);
		}
	}

	private bool FilterFunc1(Product element) => FilterFunc(element, searchString1);

	private bool FilterFunc(Product element, string searchString)
	{
		if(string.IsNullOrWhiteSpace(searchString))
			return true;
		if(element.Title.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		if (element.Category.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		return false;
	}
}
