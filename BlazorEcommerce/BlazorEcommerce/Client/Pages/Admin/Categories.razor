@page "/admin/categories"
@inject ICategoryService categoryService
@attribute [Authorize(Roles = "Admin")]
@implements IDisposable

<PageTitle>Admin | Category List</PageTitle>

<div class="header">
	<div class="col">Name</div>
	<div class="col">Url</div>
	<div class="col">Visible</div>
	<div class="col">Deleted</div>
	<div class="col">Actions</div>
</div>

@foreach(var category in categoryService.AdminCategories)
{
	@if(category.Editing)
	{
		<EditForm Model="editingCategory" OnSubmit="UpdateCategory">
			<div class="row">
				<div class="col">
					<InputText @bind-Value="editingCategory.Name" class="form-control" />
				</div>
				<div class="col">
					<InputText @bind-Value="editingCategory.Url" class="form-control" />
				</div>
				<div class="col col-visible">
					<InputCheckbox @bind-Value="editingCategory.Visible" class="big-checkbox" style="transform : scale(2,2);" />
				</div>
				<div class="col"></div>
				<div class="col text-center">
					<MudIconButton ButtonType="ButtonType.Submit" Icon="@Icons.Material.Filled.CloudUpload" Variant="Variant.Filled" Color="Color.Success" />
					<MudIconButton Icon="@Icons.Material.Filled.Cancel" Variant="Variant.Filled" Color="Color.Error" @onclick="CancelEditing" />
				</div>
			</div>
		</EditForm>
	} else
	{
		<div class="row">
			<div class="col">
				@category.Name
			</div>
			<div class="col">
				@category.Url
			</div>
			<div class="col col-visible">
				@if(category.Visible)
				{
					<MudTooltip Text="This category is not Visible to Customer" Arrow="true" Placement="Placement.Top">
						<MudIcon Icon="@Icons.Material.Filled.Check" Size="Size.Medium" Color="Color.Success" />
					</MudTooltip>
				} else
				{
					<MudTooltip Text="This category is Visible to Customer" Arrow="true" Placement="Placement.Top">
						<MudIcon Icon="@Icons.Material.Filled.Close" Size="Size.Medium" Color="Color.Error" />
					</MudTooltip>
				}
			</div>
			<div class="col col-deleted">
				@if(category.Deleted)
				{
					<MudTooltip Text="This category can't be Accessed by Customer" Arrow="true" Placement="Placement.Top">
						<MudIcon Icon="@Icons.Material.Filled.Check" Size="Size.Medium" Color="Color.Success" />
					</MudTooltip>
				} else
				{
					<MudTooltip Text="This category can be Accessed by Customer" Arrow="true" Placement="Placement.Top">
						<MudIcon Icon="@Icons.Material.Filled.Close" Size="Size.Medium" Color="Color.Error" />
					</MudTooltip>
				}
			</div>
			<div class="col text-center">
				<MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Color="Color.Info" aria-label="Edit" @onclick=@(() => EditCategory(category)) />
				<MudIconButton data-bs-toggle="modal" data-bs-target="#exampleModal" Icon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Error" aria-label="Edit" @onclick=@(() => editingCategory = category) />

				@*Modal*@
				<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
					<div class="modal-dialog modal-dialog-centered">
						<div class="modal-content">
							<div class="modal-header">
								<h1 class="modal-title fs-5" id="exampleModalLabel">Delete Confirmation</h1>
								<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
							</div>
							<div class="modal-body">
								Do you want to Delete <span class="fw-bold">@(editingCategory != null ? editingCategory.Name : null)?</span>
							</div>
							<div class="modal-footer">
								<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
								<button type="button" class="btn btn-danger" data-bs-dismiss="modal" @onclick=@(() => DeleteCategory(editingCategory.Id))>Delete</button>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	}
}

<MudButton Class="my-5" StartIcon="@Icons.Material.Filled.Add" Color="Color.Info" @onclick="CreateNewCategory" Variant="Variant.Filled">
	<MudText>Add New Category</MudText>
</MudButton>

@code {
	Category editingCategory = null;

	protected override async Task OnInitializedAsync()
	{
		await categoryService.GetAdminCategories();
		categoryService.OnChange += StateHasChanged;
	}

	public void Dispose()
	{
		categoryService.OnChange -= StateHasChanged;
	}

	private void CreateNewCategory()
	{
		editingCategory = categoryService.CreateNewCategory();
	}

	private void EditCategory(Category category)
	{
		category.Editing = true;
		editingCategory = category;
	}

	private async Task UpdateCategory()
	{
		if (editingCategory.IsNew)
		{
			await categoryService.AddCategory(editingCategory);
		} else
		{
			await categoryService.UpdateCategory(editingCategory);
		}
		editingCategory = new Category();
	}

	private async Task CancelEditing()
	{
		editingCategory = new Category();
		await categoryService.GetAdminCategories();
	}

	private async Task DeleteCategory(int id)
	{
		await categoryService.DeleteCategory(id);
	}
}
