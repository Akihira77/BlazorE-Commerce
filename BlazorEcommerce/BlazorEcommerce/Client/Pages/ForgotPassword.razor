@page "/forgot-password"
@inject IAuthService authService
@inject NavigationManager navigationManager
@*@implements IDisposable*@
@inject ISnackbar snackbar
@using System.Timers

<h3>ForgotPassword</h3>

<EditForm class="mt-3 container d-flex flex-column" Model="user" OnValidSubmit="GetToken">
	<DataAnnotationsValidator />

	<div class="mb-3">
		<MudTextField @bind-Value="user.Email" Label="Email" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
		<ValidationMessage For="() => user.Email" />
	</div>
	<MudButton Color="Color.Primary" Variant="Variant.Filled" ButtonType="ButtonType.Submit" Disabled="@_getTokenDisabled">Get Token</MudButton>
</EditForm>

@if(counter >= 0)
{
	<div class="container d-flex flex-column">
		<p class="text-center">@counter</p>

		<div style="width: 100px" class="d-flex mx-auto flex-column">
			<MudTextField Immediate="true" Value="token" ValueChanged="((string value) => CheckToken(value))" Label="Token" Variant="Variant.Outlined" Margin="Margin.Dense" Disabled="@(!_getTokenDisabled)"></MudTextField>
			<MudButton Class="mt-2" Color="Color.Success" Variant="Variant.Filled" Disabled="@_verifyDisabled" OnClick="VerifyToken">Verify</MudButton>
		</div>
		@if(isTokenCorrect)
		{
			<EditForm class="change-password-form mt-3 d-flex flex-column" Model="request" OnValidSubmit="ChangePassword">
				<DataAnnotationsValidator />

				<div class="mb-3">
					<label for="password">New Password</label>
					<div class="mt-1 input-group">
						<InputText type="@txtType"
					id="password"
						   @bind-Value="request.Password"
					class="form-control" />
						<button type="button" class="input-group-text oi oi-eye top-0" @onclick="ShowPassword"></button>
					</div>
				</div>
				<ValidationMessage For="() => request.Password" />
				<div class="mb-3">
					<label for="confirmPassword">Confirm Password</label>
					<div class="mt-1 input-group">
						<InputText type="@txtConfirmType"
					id="confirmPassword"
						   @bind-Value="request.ConfirmPassword"
					class="form-control" />
						<button type="button" class="input-group-text oi oi-eye top-0" @onclick="ShowConfirmPassword"></button>
					</div>
				</div>
				<ValidationMessage For="() => request.ConfirmPassword" />

				<div class="ms-auto">
					<button type="submit" class="btn btn-primary">Apply</button>
				</div>
				<div class="@messageCssClass">
					<span>@message</span>
				</div>
			</EditForm>
		}
	</div>
}

@code {
	ResetPassword user = new ResetPassword();
	static Timer timer;
	int counter = -1;
	int _exp;
	bool _getTokenDisabled = false;
	bool _verifyDisabled = true;
	UserChangePassword request = new UserChangePassword();
	string message = string.Empty;
	string messageCssClass = string.Empty;
	string txtType = "password";
	string txtConfirmType = "password";
	bool isTokenCorrect = false;
	string token = string.Empty;

	private async Task GetToken() {
		var result = await authService.GetToken(user.Email);
		if (result.Success)
		{
			counter = 180;
			timer = new Timer(1000);
			timer.Elapsed += CountDownTimer;
			timer.Enabled = true;

			_getTokenDisabled = true;

			snackbar.Add("Token has been sent to your email", Severity.Success);
			user.Token = result.Data;
		} else
		{
			snackbar.Add(result.Message, Severity.Error);
		}
	}

	private void CheckToken(string newValue)
	{
		_verifyDisabled = (token.Length == 6);
		token = newValue;
	}

	private void VerifyToken()
	{
		if (token == user.Token)
		{
			isTokenCorrect = true;
		} else
		{
			snackbar.Add("Token is not correct", Severity.Error);
			isTokenCorrect = false;
		}
	}

	public void CountDownTimer(Object source, System.Timers.ElapsedEventArgs e)
	{
		if (counter > 0)
		{
			counter--;
		} else
		{
			_getTokenDisabled = false;
			isTokenCorrect = false;
			user.Token = token = string.Empty;
			timer.Enabled = false;
		}
		InvokeAsync(StateHasChanged);
	}

	private async Task ChangePassword()
	{
		var result = await authService.ChangePassword(request);

		message = result.Message;
		messageCssClass = result.Success ? "text-success" : "text-danger";
	}

	private void ShowPassword()
	{
		if (txtType == "password")
		{
			txtType = "text";
		} else
		{
			txtType = "password";
		}
	}			

	private void ShowConfirmPassword()
	{
		if(txtConfirmType == "password")
		{
			txtConfirmType = "text";
		} else
		{
			txtConfirmType = "password";
		}
	}
}
